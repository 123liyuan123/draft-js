(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{198:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));n(210),n(211),n(207),n(212),n(213),n(214);var a=n(208);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={id:"api-reference-entity",title:"Entity"},c=[{value:"Overview",id:"overview",children:[]},{value:"Methods",id:"methods",children:[{value:"<code>create</code> <em>(Deprecated in favour of contentState.createEntity)</em>",id:"create-deprecated-in-favour-of-contentstatecreateentity",children:[]},{value:"<code>add</code> <em>(Deprecated in favour of contentState.addEntity)</em>",id:"add-deprecated-in-favour-of-contentstateaddentity",children:[]},{value:"<code>get</code> <em>(Deprecated in favour of contentState.getEntity)</em>",id:"get-deprecated-in-favour-of-contentstategetentity",children:[]},{value:"<code>mergeData</code> <em>(Deprecated in favour of contentState.mergeEntityData)</em>",id:"mergedata-deprecated-in-favour-of-contentstatemergeentitydata",children:[]},{value:"<code>replaceData</code> <em>(Deprecated in favour of contentState.replaceEntityData)</em>",id:"replacedata-deprecated-in-favour-of-contentstatereplaceentitydata",children:[]}]}],o={rightToc:c},d="wrapper";function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(d,r({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Entity")," is a static module containing the API for creating, retrieving, and\nupdating entity objects, which are used for annotating text ranges with metadata.\nThis module also houses the single store used to maintain entity data."),Object(a.b)("p",null,"This article is dedicated to covering the details of the API. See the\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/advanced-topics-entities"}),"advanced topics article on entities"),"\nfor more detail on how entities may be used."),Object(a.b)("p",null,"Please note that the API for entity storage and management has changed recently;\nfor details on updating your application\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/v0-10-api-migration#content"}),"see our v0.10 API Migration Guide"),"."),Object(a.b)("p",null,"Entity objects returned by ",Object(a.b)("inlineCode",{parentName:"p"},"Entity")," methods are represented as\n",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/facebook/draft-js/blob/master/src/model/entity/DraftEntityInstance.js"}),"DraftEntityInstance")," immutable records. These have a small set of getter functions and should\nbe used only for retrieval."),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Methods")),Object(a.b)("ul",{class:"apiIndex"},Object(a.b)("li",null,Object(a.b)("a",{href:"#create"},Object(a.b)("pre",null,"create(...): DraftEntityInstance"))),Object(a.b)("li",null,Object(a.b)("a",{href:"#add"},Object(a.b)("pre",null,"add(instance: DraftEntityInstance): string"))),Object(a.b)("li",null,Object(a.b)("a",{href:"#get"},Object(a.b)("pre",null,"get(key: string): DraftEntityInstance"))),Object(a.b)("li",null,Object(a.b)("a",{href:"#mergedata"},Object(a.b)("pre",null,"mergeData(...): DraftEntityInstance"))),Object(a.b)("li",null,Object(a.b)("a",{href:"#replacedata"},Object(a.b)("pre",null,"replaceData(...): DraftEntityInstance")))),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("h3",{id:"create-deprecated-in-favour-of-contentstatecreateentity"},Object(a.b)("inlineCode",{parentName:"h3"},"create")," ",Object(a.b)("em",{parentName:"h3"},"(Deprecated in favour of ",Object(a.b)("a",r({parentName:"em"},{href:"/docs/api-reference-content-state#createentity"}),Object(a.b)("inlineCode",{parentName:"a"},"contentState.createEntity")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"create(\n  type: DraftEntityType,\n  mutability: DraftEntityMutability,\n  data?: Object\n): string\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"create")," method should be used to generate a new entity object with the\nsupplied properties."),Object(a.b)("p",null,"Note that a string is returned from this function. This is because entities\nare referenced by their string key in ",Object(a.b)("inlineCode",{parentName:"p"},"ContentState"),". The string value should\nbe used within ",Object(a.b)("inlineCode",{parentName:"p"},"CharacterMetadata")," objects to track the entity for annotated\ncharacters."),Object(a.b)("h3",{id:"add-deprecated-in-favour-of-contentstateaddentity"},Object(a.b)("inlineCode",{parentName:"h3"},"add")," ",Object(a.b)("em",{parentName:"h3"},"(Deprecated in favour of ",Object(a.b)("a",r({parentName:"em"},{href:"/docs/api-reference-content-state#addentity"}),Object(a.b)("inlineCode",{parentName:"a"},"contentState.addEntity")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"add(instance: DraftEntityInstance): string\n")),Object(a.b)("p",null,"In most cases, you will use ",Object(a.b)("inlineCode",{parentName:"p"},"Entity.create()"),". This is a convenience method\nthat you probably will not need in typical Draft usage."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"add")," function is useful in cases where the instances have already been\ncreated, and now need to be added to the ",Object(a.b)("inlineCode",{parentName:"p"},"Entity")," store. This may occur in cases\nwhere a vanilla JavaScript representation of a ",Object(a.b)("inlineCode",{parentName:"p"},"ContentState")," is being revived\nfor editing."),Object(a.b)("h3",{id:"get-deprecated-in-favour-of-contentstategetentity"},Object(a.b)("inlineCode",{parentName:"h3"},"get")," ",Object(a.b)("em",{parentName:"h3"},"(Deprecated in favour of ",Object(a.b)("a",r({parentName:"em"},{href:"/docs/api-reference-content-state#getentity"}),Object(a.b)("inlineCode",{parentName:"a"},"contentState.getEntity")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"get(key: string): DraftEntityInstance\n")),Object(a.b)("p",null,"Returns the ",Object(a.b)("inlineCode",{parentName:"p"},"DraftEntityInstance")," for the specified key. Throws if no instance\nexists for that key."),Object(a.b)("h3",{id:"mergedata-deprecated-in-favour-of-contentstatemergeentitydata"},Object(a.b)("inlineCode",{parentName:"h3"},"mergeData")," ",Object(a.b)("em",{parentName:"h3"},"(Deprecated in favour of ",Object(a.b)("a",r({parentName:"em"},{href:"/docs/api-reference-content-state#mergeentitydata"}),Object(a.b)("inlineCode",{parentName:"a"},"contentState.mergeEntityData")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"mergeData(\n  key: string,\n  toMerge: {[key: string]: any}\n): DraftEntityInstance\n")),Object(a.b)("p",null,"Since ",Object(a.b)("inlineCode",{parentName:"p"},"DraftEntityInstance")," objects are immutable, you cannot update an entity's\nmetadata through typical mutative means."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"mergeData")," method allows you to apply updates to the specified entity."),Object(a.b)("h3",{id:"replacedata-deprecated-in-favour-of-contentstatereplaceentitydata"},Object(a.b)("inlineCode",{parentName:"h3"},"replaceData")," ",Object(a.b)("em",{parentName:"h3"},"(Deprecated in favour of ",Object(a.b)("a",r({parentName:"em"},{href:"/docs/api-reference-content-state#replaceentitydata"}),Object(a.b)("inlineCode",{parentName:"a"},"contentState.replaceEntityData")),")")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"replaceData(\n  key: string,\n  newData: {[key: string]: any}\n): DraftEntityInstance\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"replaceData")," method is similar to the ",Object(a.b)("inlineCode",{parentName:"p"},"mergeData")," method, except it will\ntotally discard the existing ",Object(a.b)("inlineCode",{parentName:"p"},"data")," value for the instance and replace it with\nthe specified ",Object(a.b)("inlineCode",{parentName:"p"},"newData"),"."))}b.isMDXComponent=!0}}]);